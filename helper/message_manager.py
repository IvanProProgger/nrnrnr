from telegram import InlineKeyboardMarkup
from telegram.ext import ContextTypes

from config.logging_config import logger
from db import db

from helper.messages import INITIATOR, HEAD, FINANCE, PAYMENT
from helper.user_data import get_chat_ids, get_department


class MessageManager:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ –æ—Ç–¥–µ–ª–∞–º"""

    _instance = None

    def __new__(cls):
        if cls._instance is None:
            cls._instance = super(MessageManager, cls).__new__(cls)
            cls._instance._initialize()
        return cls._instance

    def _initialize(self):
        self._data = {}
        self.db = db
        self.messages = {
            "initiator": INITIATOR,
            "head": HEAD,
            "finance": FINANCE,
            "payment": PAYMENT,
        }

    def __getitem__(self, row_id):
        """–ü–æ–∑–≤–æ–ª—è–µ—Ç –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∫ –¥–∞–Ω–Ω—ã–º –∫–∞–∫ –∫ —Å–ª–æ–≤–∞—Ä—é."""
        return self._data.get(row_id, {})

    def __getattr__(self, name: str):
        """–ü–æ–∑–≤–æ–ª—è–µ—Ç –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∫ –¥–∞–Ω–Ω—ã–º —á–µ—Ä–µ–∑ –∞—Ç—Ä–∏–±—É—Ç—ã."""
        if name.startswith("_"):
            raise AttributeError(f"–ù–µ–ª—å–∑—è –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –ø—Ä–∏–≤–∞—Ç–Ω–æ–º—É –∞—Ç—Ä–∏–±—É—Ç—É {name}")
        return self._data.get(
            name, AttributeError(f"–ù–µ—Ç —Å–≤–æ–π—Å—Ç–≤–∞ {name} –≤ {self.__class__.__name__}")
        )

    def __setitem__(self, row_id: int, value: dict):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ ID —è—á–µ–π–∫–∏."""
        if not isinstance(value, dict):
            raise ValueError("–ó–Ω–∞—á–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Å–ª–æ–≤–∞—Ä–µ–º.")
        self._data[row_id] = value

    def __delitem__(self, row_id: int):
        """–£–¥–∞–ª—è–µ—Ç —ç–ª–µ–º–µ–Ω—Ç –ø–æ ID —è—á–µ–π–∫–∏."""
        if row_id in self._data:
            del self._data[row_id]
        else:
            raise KeyError("ID —è—á–µ–π–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω.")

    async def __call__(self, row_id: int) -> dict[str, int]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ row_id."""
        return {"row_id": row_id, **self._data.get(row_id, {})}

    async def update_data(self, row_id: int, data_dict: dict):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ —è—á–µ–π–∫–∏ –ø–æ ID."""
        self._data.setdefault(row_id, {}).update(data_dict)

    async def get_message(self, department, stage, **kwargs) -> str:
        if department not in self.messages:
            raise ValueError(f"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç: {department}")

        if stage not in self.messages[department].keys():
            raise ValueError(f"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è —Å—Ç–∞–¥–∏—è –¥–ª—è {department}: {stage}")

        try:
            return self.messages[department][stage].format(**kwargs)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            raise ValueError(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")


    async def send_messages_with_tracking(
        self,
        context: ContextTypes.DEFAULT_TYPE,
        row_id,
        chat_ids: list[int | str] | int | str,
        department: str,
        stage: str,
        reply_markup: InlineKeyboardMarkup = None,
    ) -> None:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Ç–µ–ª–µ–≥—Ä–∞–º-—á–∞—Ç—ã —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º message_id –∏ user_id."""

        message_text = await self.get_message(department, stage, **await self(row_id))
        message_ids = []
        actual_chat_ids = []
        logger.info(chat_ids)
        if isinstance(chat_ids, (int, str)):
            chat_ids = [chat_ids]
        for chat_id in chat_ids:
            try:
                message = await context.bot.send_message(
                    chat_id=chat_id,
                    text=f"‚ú®{message_text}‚ú®",
                    reply_markup=reply_markup,
                )
                message_ids.append(message.message_id)
                actual_chat_ids.append(chat_id)
            except Exception as e:
                logger.info(
                    f"üö®–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ chat_id: {chat_id}. –û—à–∏–±–∫–∞: {e}"
                )
                pass
        self[row_id][f"{department}_messages"] = list(zip(actual_chat_ids, message_ids))

    async def resend_messages_with_tracking(
        self,
        context: ContextTypes.DEFAULT_TYPE,
        row_id: int,
        department: str,
        stage: str,
        reply_markup: InlineKeyboardMarkup = None,
    ) -> None:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–æ–≤–æ–µ –∏ —É–¥–∞–ª—è–µ—Ç —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ."""

        key = f"{department}_messages"
        if self[row_id].get(key) is None:
            raise RuntimeError(f"–û—à–∏–±–∫–∞! –ü–æ –∫–ª—é—á—É {department}_messages –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö!")

        actual_chat_ids = []
        message_ids = []
        message_text = await self.get_message(department, stage, **await self(row_id))
        for chat_id, message_id in self[row_id].get(key):
            try:
                message = await context.bot.send_message(
                    chat_id=chat_id, text=f"üîÑ{message_text}", reply_markup=reply_markup
                )
                message_ids.append(message.message_id)
                actual_chat_ids.append(chat_id)
                await context.bot.delete_message(chat_id=chat_id, message_id=message_id)
            except Exception as e:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å chat_id: {chat_id}: {e}")
                pass
        self[row_id][key] = list(zip(actual_chat_ids, message_ids))

    async def send_department_messages(
        self,
        context: ContextTypes.DEFAULT_TYPE,
        row_id: int,
        department: str,
        chat_ids: list[int] | int | str,
        stage: str,
        reply_markup: InlineKeyboardMarkup = None,
    ):
        await self.send_messages_with_tracking(
            context, row_id, chat_ids, department, stage, reply_markup=reply_markup
        )

    async def edit_department_messages(
        self,
        context: ContextTypes.DEFAULT_TYPE,
        row_id: int,
        department: str,
        stage: str,
        reply_markup: InlineKeyboardMarkup = None,
    ):
        await self.resend_messages_with_tracking(
            context, row_id, department, stage, reply_markup=reply_markup
        )

    async def command_reply_message(self, update, context, row_id):
        try:
            department = await get_department(update.effective_chat.id)
            department_chat_ids = await get_chat_ids(department)
            await self.send_messages_with_tracking(
                context, row_id, department_chat_ids, department, stage=""
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ reply_message: {e}")

    async def get_all_messages(self, row_id: int) -> list[tuple]:
        all_messages = []

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
        for message_type in [
            "initiator_messages",
            "head_messages",
            "finance_messages",
            "payment_messages",
        ]:
            messages = self[row_id].get(message_type, [])
            all_messages.extend(messages)

        if "all_messages" not in self[row_id]:
            self[row_id]["all_messages"] = []

        self[row_id]["all_messages"] = all_messages

        return self[row_id]["all_messages"]


message_manager = MessageManager()
