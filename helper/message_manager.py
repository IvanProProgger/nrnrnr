from telegram import InlineKeyboardMarkup
from telegram.ext import ContextTypes

from config.logging_config import logger
from db import db

from helper.messages import INITIATOR, HEAD, FINANCE, PAYMENT, ALL
from helper.user_data import get_chat_ids, get_department

from asyncio import gather
from pympler.tracker import SummaryTracker
import time

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç—Ä–æ—Ç–∞
import tracemalloc


tracemalloc.start()


class MessageManager:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ –æ—Ç–¥–µ–ª–∞–º"""
    _instance = None

    def __new__(cls):
        if cls._instance is None:
            cls._instance = super(MessageManager, cls).__new__(cls)
            cls._instance._initialize()
            logger.info(cls._instance)
        return cls._instance

    def _initialize(self):
        self._data = {}
        self.db = db
        self.messages = {
            "initiator": INITIATOR,
            "head": HEAD,
            "finance": FINANCE,
            "payment": PAYMENT,
            "result": ALL,
        }

    def __del__(self):
        if hasattr(self, '_del_called'):
            return
        self._del_called = True

    def __getitem__(self, row_id):
        """–ü–æ–∑–≤–æ–ª—è–µ—Ç –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∫ –¥–∞–Ω–Ω—ã–º –∫–∞–∫ –∫ —Å–ª–æ–≤–∞—Ä—é."""
        return self._data.get(row_id, {})

    def __getattr__(self, name: str):
        """–ü–æ–∑–≤–æ–ª—è–µ—Ç –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∫ –¥–∞–Ω–Ω—ã–º —á–µ—Ä–µ–∑ –∞—Ç—Ä–∏–±—É—Ç—ã."""
        if name.startswith("_"):
            raise AttributeError(f"–ù–µ–ª—å–∑—è –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –ø—Ä–∏–≤–∞—Ç–Ω–æ–º—É –∞—Ç—Ä–∏–±—É—Ç—É {name}")
        return self._data.get(
            name, AttributeError(f"–ù–µ—Ç —Å–≤–æ–π—Å—Ç–≤–∞ {name} –≤ {self.__class__.__name__}")
        )

    def __setattr__(self, name, value):
        """–ü–æ–∑–≤–æ–ª—è–µ—Ç —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å –∑–Ω–∞—á–µ–Ω–∏—è –≤ self._data[name] —á–µ—Ä–µ–∑ —Ç–æ—á–µ—á–Ω—É—é –Ω–æ—Ç–∞—Ü–∏—é."""
        if name in {"_data", "messages", "db"}:
            logger.info(self(130))
            super().__setattr__(name, value)
            logger.info(self._data)
        elif isinstance(value, dict):
            logger.info(self._data)
            self._data.setdefault(name, {}).update(value)
        else:
            logger.info(self._data)
            raise ValueError(f"–ó–Ω–∞—á–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Å–ª–æ–≤–∞—Ä–µ–º –¥–ª—è {name}")

    async def __call__(self, row_id: int) -> dict[str, int]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ row_id."""
        return {"row_id": row_id, **self._data.get(row_id, {})}

    async def add_new_record(self, record_dict: dict):
        if not isinstance(record_dict, dict):
            raise TypeError("record_dict –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–ª–æ–≤–∞—Ä–µ–º")

        row_id = next(iter(record_dict))
        if not row_id:
            raise ValueError("–í record_dict –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É–∫–∞–∑–∞–Ω 'row_id'.")

        self._data.setdefault(row_id, {})
        await self.update_data(
            row_id,
            {
                k: record_dict[row_id].get(k)
                for k in [
                    "initiator_chat_id",
                    "initiator_nickname",
                    "record_data_text",
                    "amount",
                ]
            },
        )
        logger.info(f"After sending messages, _data: {self._data}")

    async def update_data(self, row_id: int, data_dict: dict):
        self._data[row_id].update(data_dict)

    async def get_message(self, department, stage, **kwargs) -> str:
        if department not in self.messages:
            raise ValueError(f"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç: {department}")

        if stage not in self.messages[department].keys():
            raise ValueError(f"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è —Å—Ç–∞–¥–∏—è –¥–ª—è {department}: {stage}")

        try:
            return self.messages[department][stage].format(**kwargs)
        except Exception as e:
            raise f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}"

    async def send_messages_with_tracking(
        self,
        context: ContextTypes.DEFAULT_TYPE,
        row_id,
        chat_ids: list[int | str] | int | str,
        department: str,
        stage: str,
        reply_markup: InlineKeyboardMarkup = None,
    ) -> None:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Ç–µ–ª–µ–≥—Ä–∞–º-—á–∞—Ç—ã —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º message_id –∏ user_id."""
        message_text = await self.get_message(department, stage, **await self(row_id))
        logger.info(message_text)
        message_ids = []
        actual_chat_ids = []
        if isinstance(chat_ids, (int, str)):
            chat_ids = [chat_ids]
        for chat_id in chat_ids:
            try:
                message = await context.bot.send_message(
                    chat_id=chat_id, text=f"‚ú®{message_text}‚ú®", reply_markup=reply_markup
                )
                message_ids.append(message.message_id)
                actual_chat_ids.append(chat_id)
            except Exception as e:
                logger.info(
                    f"üö®–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ chat_id: {chat_id}. –û—à–∏–±–∫–∞: {e}"
                )
                pass
        self._data.get(row_id)[f"{department}_messages"] = list(
            zip(actual_chat_ids, message_ids)
        )

    async def resend_messages_with_tracking(
        self,
        context: ContextTypes.DEFAULT_TYPE,
        row_id: int,
        department: str,
        stage: str,
        reply_markup: InlineKeyboardMarkup = None,
    ) -> None:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–æ–≤–æ–µ –∏ —É–¥–∞–ª—è–µ—Ç —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ."""

        key = f"{department}_messages"
        if (await self(row_id)).get(key) is None:
            raise RuntimeError(f"–û—à–∏–±–∫–∞! –ü–æ –∫–ª—é—á—É {department}_messages –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö!")

        actual_chat_ids = []
        message_ids = []
        message_text = await self.get_message(department, stage, **await self(row_id))
        for chat_id, message_id in self._data[row_id].get(key):
            try:
                await context.bot.delete_message(chat_id=chat_id, message_id=message_id)
                message = await context.bot.send_message(
                    chat_id=chat_id, text=f"üîÑ{message_text}"
                )
                message_ids.append(message.message_id)
                actual_chat_ids.append(chat_id)
                # await context.bot.delete_message(chat_id=chat_id, message_id=message_id)
            except Exception as e:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å chat_id: {chat_id}: {e}")
                pass
        logger.info(f"After sending messages, _data: {self._data}")
        self._data.get(row_id)[key] = list(zip(actual_chat_ids, message_ids))
        logger.info(f"After sending messages, _data: {self._data}")

    async def send_department_messages(
        self,
        context: ContextTypes.DEFAULT_TYPE,
        row_id: int,
        department: str,
        chat_ids: list[int] | int | str,
        stage: str,
        reply_markup: InlineKeyboardMarkup = None,
    ):

        logger.info(f"Before sending messages, _data: {self._data}")
        await self.send_messages_with_tracking(
            context, row_id, chat_ids, department, stage, reply_markup=reply_markup
        )
        logger.info(f"After sending messages, _data: {self._data}")

    async def edit_department_messages(
        self,
        context: ContextTypes.DEFAULT_TYPE,
        row_id: int,
        department: str,
        stage: str,
    ):
        await self.resend_messages_with_tracking(
            context, row_id, department, stage, reply_markup=None
        )
        logger.info(f"After sending messages, _data: {self._data}")

    async def command_reply_message(self, update, context, row_id):
        department = await get_department(update.effective_chat.id)
        department_chat_ids = await get_chat_ids(self._data[row_id].get(department))
        await self.send_messages_with_tracking(
            context, row_id, department_chat_ids, department, stage=""
        )


message_manager = MessageManager()
